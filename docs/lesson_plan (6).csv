Week,Day,Unit Name,Topic to be Covered
1,1,Unit I,"Advanced C Concept of Pointers 

Introduction  -  Concept  of  memory  addresses,  use  of  the  (&)
operator.

Pointer Execution – Declaring and Initializing a pointer, Indirection
Operator and dereferencing a pointer.

Pointer   Arithmetic   –   Assignment,   Addition-subtraction   with integers, pointer comparison.

Use of Pointers – Returning more than one value from the function
(Call by value and call by References concept).

Pointers and Arrays – One dimensional Arrays and pointers, Difference between array name and pointers, passing one dimensional and two dimensional array to functions, Pointers for character array(strings), Array of pointers 2-D Array and pointer, pointer to function.

Dynamic memory allocation – Array allocation, Memory freeing, Memory reallocation.

Informative- void Pointers, Null pointers, Pointers to pointers, Memory  leak  and  Memory  corruption,  pointer  to  constant  and constant pointer."
1,2,Unit I,"Advanced C Concept of Pointers 

Introduction  -  Concept  of  memory  addresses,  use  of  the  (&)
operator.

Pointer Execution – Declaring and Initializing a pointer, Indirection
Operator and dereferencing a pointer.

Pointer   Arithmetic   –   Assignment,   Addition-subtraction   with integers, pointer comparison.

Use of Pointers – Returning more than one value from the function
(Call by value and call by References concept).

Pointers and Arrays – One dimensional Arrays and pointers, Difference between array name and pointers, passing one dimensional and two dimensional array to functions, Pointers for character array(strings), Array of pointers 2-D Array and pointer, pointer to function.

Dynamic memory allocation – Array allocation, Memory freeing, Memory reallocation.

Informative- void Pointers, Null pointers, Pointers to pointers, Memory  leak  and  Memory  corruption,  pointer  to  constant  and constant pointer."
1,3,Unit I,"Advanced C Concept of Pointers 

Introduction  -  Concept  of  memory  addresses,  use  of  the  (&)
operator.

Pointer Execution – Declaring and Initializing a pointer, Indirection
Operator and dereferencing a pointer.

Pointer   Arithmetic   –   Assignment,   Addition-subtraction   with integers, pointer comparison.

Use of Pointers – Returning more than one value from the function
(Call by value and call by References concept).

Pointers and Arrays – One dimensional Arrays and pointers, Difference between array name and pointers, passing one dimensional and two dimensional array to functions, Pointers for character array(strings), Array of pointers 2-D Array and pointer, pointer to function.

Dynamic memory allocation – Array allocation, Memory freeing, Memory reallocation.

Informative- void Pointers, Null pointers, Pointers to pointers, Memory  leak  and  Memory  corruption,  pointer  to  constant  and constant pointer."
2,1,Unit I,"Advanced C Concept of Pointers 

Introduction  -  Concept  of  memory  addresses,  use  of  the  (&)
operator.

Pointer Execution – Declaring and Initializing a pointer, Indirection
Operator and dereferencing a pointer.

Pointer   Arithmetic   –   Assignment,   Addition-subtraction   with integers, pointer comparison.

Use of Pointers – Returning more than one value from the function
(Call by value and call by References concept).

Pointers and Arrays – One dimensional Arrays and pointers, Difference between array name and pointers, passing one dimensional and two dimensional array to functions, Pointers for character array(strings), Array of pointers 2-D Array and pointer, pointer to function.

Dynamic memory allocation – Array allocation, Memory freeing, Memory reallocation.

Informative- void Pointers, Null pointers, Pointers to pointers, Memory  leak  and  Memory  corruption,  pointer  to  constant  and constant pointer."
2,2,Unit I,"Advanced C Concept of Pointers 

Introduction  -  Concept  of  memory  addresses,  use  of  the  (&)
operator.

Pointer Execution – Declaring and Initializing a pointer, Indirection
Operator and dereferencing a pointer.

Pointer   Arithmetic   –   Assignment,   Addition-subtraction   with integers, pointer comparison.

Use of Pointers – Returning more than one value from the function
(Call by value and call by References concept).

Pointers and Arrays – One dimensional Arrays and pointers, Difference between array name and pointers, passing one dimensional and two dimensional array to functions, Pointers for character array(strings), Array of pointers 2-D Array and pointer, pointer to function.

Dynamic memory allocation – Array allocation, Memory freeing, Memory reallocation.

Informative- void Pointers, Null pointers, Pointers to pointers, Memory  leak  and  Memory  corruption,  pointer  to  constant  and constant pointer."
2,3,Unit I,"Advanced C Concept of Pointers 

Introduction  -  Concept  of  memory  addresses,  use  of  the  (&)
operator.

Pointer Execution – Declaring and Initializing a pointer, Indirection
Operator and dereferencing a pointer.

Pointer   Arithmetic   –   Assignment,   Addition-subtraction   with integers, pointer comparison.

Use of Pointers – Returning more than one value from the function
(Call by value and call by References concept).

Pointers and Arrays – One dimensional Arrays and pointers, Difference between array name and pointers, passing one dimensional and two dimensional array to functions, Pointers for character array(strings), Array of pointers 2-D Array and pointer, pointer to function.

Dynamic memory allocation – Array allocation, Memory freeing, Memory reallocation.

Informative- void Pointers, Null pointers, Pointers to pointers, Memory  leak  and  Memory  corruption,  pointer  to  constant  and constant pointer."
3,1,Unit I,"Advanced C Concept of Pointers 

Introduction  -  Concept  of  memory  addresses,  use  of  the  (&)
operator.

Pointer Execution – Declaring and Initializing a pointer, Indirection
Operator and dereferencing a pointer.

Pointer   Arithmetic   –   Assignment,   Addition-subtraction   with integers, pointer comparison.

Use of Pointers – Returning more than one value from the function
(Call by value and call by References concept).

Pointers and Arrays – One dimensional Arrays and pointers, Difference between array name and pointers, passing one dimensional and two dimensional array to functions, Pointers for character array(strings), Array of pointers 2-D Array and pointer, pointer to function.

Dynamic memory allocation – Array allocation, Memory freeing, Memory reallocation.

Informative- void Pointers, Null pointers, Pointers to pointers, Memory  leak  and  Memory  corruption,  pointer  to  constant  and constant pointer."
3,2,Unit I,"Advanced C Concept of Pointers 

Introduction  -  Concept  of  memory  addresses,  use  of  the  (&)
operator.

Pointer Execution – Declaring and Initializing a pointer, Indirection
Operator and dereferencing a pointer.

Pointer   Arithmetic   –   Assignment,   Addition-subtraction   with integers, pointer comparison.

Use of Pointers – Returning more than one value from the function
(Call by value and call by References concept).

Pointers and Arrays – One dimensional Arrays and pointers, Difference between array name and pointers, passing one dimensional and two dimensional array to functions, Pointers for character array(strings), Array of pointers 2-D Array and pointer, pointer to function.

Dynamic memory allocation – Array allocation, Memory freeing, Memory reallocation.

Informative- void Pointers, Null pointers, Pointers to pointers, Memory  leak  and  Memory  corruption,  pointer  to  constant  and constant pointer."
3,3,Unit II,"User Defined Data types – Structures, Union and Enumerated data type. 

Basic structure operations- Declaring structures and structure variables, Accessing the members of the structure, Initialization of Structures, Structure comparisons and copying, type def and its use.

Advanced - Nested structures, Array within the structure and Array of structures, Structures with functions and structures with pointers. Union and its operations

Enumerated data type, bit field"
4,1,Unit II,"User Defined Data types – Structures, Union and Enumerated data type. 

Basic structure operations- Declaring structures and structure variables, Accessing the members of the structure, Initialization of Structures, Structure comparisons and copying, type def and its use.

Advanced - Nested structures, Array within the structure and Array of structures, Structures with functions and structures with pointers. Union and its operations

Enumerated data type, bit field"
4,2,Unit II,"User Defined Data types – Structures, Union and Enumerated data type. 

Basic structure operations- Declaring structures and structure variables, Accessing the members of the structure, Initialization of Structures, Structure comparisons and copying, type def and its use.

Advanced - Nested structures, Array within the structure and Array of structures, Structures with functions and structures with pointers. Union and its operations

Enumerated data type, bit field"
4,3,Unit II,"User Defined Data types – Structures, Union and Enumerated data type. 

Basic structure operations- Declaring structures and structure variables, Accessing the members of the structure, Initialization of Structures, Structure comparisons and copying, type def and its use.

Advanced - Nested structures, Array within the structure and Array of structures, Structures with functions and structures with pointers. Union and its operations

Enumerated data type, bit field"
5,1,Unit II,"User Defined Data types – Structures, Union and Enumerated data type. 

Basic structure operations- Declaring structures and structure variables, Accessing the members of the structure, Initialization of Structures, Structure comparisons and copying, type def and its use.

Advanced - Nested structures, Array within the structure and Array of structures, Structures with functions and structures with pointers. Union and its operations

Enumerated data type, bit field"
5,2,Unit II,"User Defined Data types – Structures, Union and Enumerated data type. 

Basic structure operations- Declaring structures and structure variables, Accessing the members of the structure, Initialization of Structures, Structure comparisons and copying, type def and its use.

Advanced - Nested structures, Array within the structure and Array of structures, Structures with functions and structures with pointers. Union and its operations

Enumerated data type, bit field"
5,3,Unit II,"User Defined Data types – Structures, Union and Enumerated data type. 

Basic structure operations- Declaring structures and structure variables, Accessing the members of the structure, Initialization of Structures, Structure comparisons and copying, type def and its use.

Advanced - Nested structures, Array within the structure and Array of structures, Structures with functions and structures with pointers. Union and its operations

Enumerated data type, bit field"
6,1,Unit II,"User Defined Data types – Structures, Union and Enumerated data type. 

Basic structure operations- Declaring structures and structure variables, Accessing the members of the structure, Initialization of Structures, Structure comparisons and copying, type def and its use.

Advanced - Nested structures, Array within the structure and Array of structures, Structures with functions and structures with pointers. Union and its operations

Enumerated data type, bit field"
6,2,Unit III,"Files in C 

Introduction – Streams in C, Types of Files.

Files in C – Declaration of File pointer, Opening a File, Closing a file
(fopen(), fclose()), Various modes to open the file.

File  functions  for  Reading  data  from  files  –  fscanf(),  getw(), fgets(), fgetc(), fread()

File functions for writing data to files- fprintf(), putw(), fputs(), fputc(), fwrite()

Detecting the end of the file – what is EOF and feof() function

Types of the files – Binary and Text files.

Types of access to the file – Sequential and Random access, Difference between both, how to read and write data in both the cases, for random access (fseek(), ftell(), rewind(), fgetpos(), fsetpos())

Error handling during File operations – clearer(), Perror()

Files  of  records  –  Working  with  files  of  records  (fread()  and fwrite()).

Other functions – Renaming a file, Removing a file, Command line
Arguments."
6,3,Unit III,"Files in C 

Introduction – Streams in C, Types of Files.

Files in C – Declaration of File pointer, Opening a File, Closing a file
(fopen(), fclose()), Various modes to open the file.

File  functions  for  Reading  data  from  files  –  fscanf(),  getw(), fgets(), fgetc(), fread()

File functions for writing data to files- fprintf(), putw(), fputs(), fputc(), fwrite()

Detecting the end of the file – what is EOF and feof() function

Types of the files – Binary and Text files.

Types of access to the file – Sequential and Random access, Difference between both, how to read and write data in both the cases, for random access (fseek(), ftell(), rewind(), fgetpos(), fsetpos())

Error handling during File operations – clearer(), Perror()

Files  of  records  –  Working  with  files  of  records  (fread()  and fwrite()).

Other functions – Renaming a file, Removing a file, Command line
Arguments."
7,1,Unit III,"Files in C 

Introduction – Streams in C, Types of Files.

Files in C – Declaration of File pointer, Opening a File, Closing a file
(fopen(), fclose()), Various modes to open the file.

File  functions  for  Reading  data  from  files  –  fscanf(),  getw(), fgets(), fgetc(), fread()

File functions for writing data to files- fprintf(), putw(), fputs(), fputc(), fwrite()

Detecting the end of the file – what is EOF and feof() function

Types of the files – Binary and Text files.

Types of access to the file – Sequential and Random access, Difference between both, how to read and write data in both the cases, for random access (fseek(), ftell(), rewind(), fgetpos(), fsetpos())

Error handling during File operations – clearer(), Perror()

Files  of  records  –  Working  with  files  of  records  (fread()  and fwrite()).

Other functions – Renaming a file, Removing a file, Command line
Arguments."
7,2,Unit III,"Files in C 

Introduction – Streams in C, Types of Files.

Files in C – Declaration of File pointer, Opening a File, Closing a file
(fopen(), fclose()), Various modes to open the file.

File  functions  for  Reading  data  from  files  –  fscanf(),  getw(), fgets(), fgetc(), fread()

File functions for writing data to files- fprintf(), putw(), fputs(), fputc(), fwrite()

Detecting the end of the file – what is EOF and feof() function

Types of the files – Binary and Text files.

Types of access to the file – Sequential and Random access, Difference between both, how to read and write data in both the cases, for random access (fseek(), ftell(), rewind(), fgetpos(), fsetpos())

Error handling during File operations – clearer(), Perror()

Files  of  records  –  Working  with  files  of  records  (fread()  and fwrite()).

Other functions – Renaming a file, Removing a file, Command line
Arguments."
7,3,Unit III,"Files in C 

Introduction – Streams in C, Types of Files.

Files in C – Declaration of File pointer, Opening a File, Closing a file
(fopen(), fclose()), Various modes to open the file.

File  functions  for  Reading  data  from  files  –  fscanf(),  getw(), fgets(), fgetc(), fread()

File functions for writing data to files- fprintf(), putw(), fputs(), fputc(), fwrite()

Detecting the end of the file – what is EOF and feof() function

Types of the files – Binary and Text files.

Types of access to the file – Sequential and Random access, Difference between both, how to read and write data in both the cases, for random access (fseek(), ftell(), rewind(), fgetpos(), fsetpos())

Error handling during File operations – clearer(), Perror()

Files  of  records  –  Working  with  files  of  records  (fread()  and fwrite()).

Other functions – Renaming a file, Removing a file, Command line
Arguments."
8,1,Unit III,"Files in C 

Introduction – Streams in C, Types of Files.

Files in C – Declaration of File pointer, Opening a File, Closing a file
(fopen(), fclose()), Various modes to open the file.

File  functions  for  Reading  data  from  files  –  fscanf(),  getw(), fgets(), fgetc(), fread()

File functions for writing data to files- fprintf(), putw(), fputs(), fputc(), fwrite()

Detecting the end of the file – what is EOF and feof() function

Types of the files – Binary and Text files.

Types of access to the file – Sequential and Random access, Difference between both, how to read and write data in both the cases, for random access (fseek(), ftell(), rewind(), fgetpos(), fsetpos())

Error handling during File operations – clearer(), Perror()

Files  of  records  –  Working  with  files  of  records  (fread()  and fwrite()).

Other functions – Renaming a file, Removing a file, Command line
Arguments."
8,2,Unit III,"Files in C 

Introduction – Streams in C, Types of Files.

Files in C – Declaration of File pointer, Opening a File, Closing a file
(fopen(), fclose()), Various modes to open the file.

File  functions  for  Reading  data  from  files  –  fscanf(),  getw(), fgets(), fgetc(), fread()

File functions for writing data to files- fprintf(), putw(), fputs(), fputc(), fwrite()

Detecting the end of the file – what is EOF and feof() function

Types of the files – Binary and Text files.

Types of access to the file – Sequential and Random access, Difference between both, how to read and write data in both the cases, for random access (fseek(), ftell(), rewind(), fgetpos(), fsetpos())

Error handling during File operations – clearer(), Perror()

Files  of  records  –  Working  with  files  of  records  (fread()  and fwrite()).

Other functions – Renaming a file, Removing a file, Command line
Arguments."
8,3,Unit III,"Files in C 

Introduction – Streams in C, Types of Files.

Files in C – Declaration of File pointer, Opening a File, Closing a file
(fopen(), fclose()), Various modes to open the file.

File  functions  for  Reading  data  from  files  –  fscanf(),  getw(), fgets(), fgetc(), fread()

File functions for writing data to files- fprintf(), putw(), fputs(), fputc(), fwrite()

Detecting the end of the file – what is EOF and feof() function

Types of the files – Binary and Text files.

Types of access to the file – Sequential and Random access, Difference between both, how to read and write data in both the cases, for random access (fseek(), ftell(), rewind(), fgetpos(), fsetpos())

Error handling during File operations – clearer(), Perror()

Files  of  records  –  Working  with  files  of  records  (fread()  and fwrite()).

Other functions – Renaming a file, Removing a file, Command line
Arguments."
9,1,Unit IV,"Advanced  C  concept  –  Bitwise  operators  and  Pre-processor directives.
Bitwise Operators – Introduction, Bitwise operators (bitwise and,
bitwise or, bitwise Exclusive or, bitwise not, bitwise shift operator). Pre-processor  Directives–  Types  of  pre-processor  directives,  # define,  #include,  #un  def,  #line,  pragma  directives,  Conditional directives,  Predefined  identifiers,  Type  Qualifiers,  variable  length arguments."
9,2,Unit IV,"Advanced  C  concept  –  Bitwise  operators  and  Pre-processor directives.
Bitwise Operators – Introduction, Bitwise operators (bitwise and,
bitwise or, bitwise Exclusive or, bitwise not, bitwise shift operator). Pre-processor  Directives–  Types  of  pre-processor  directives,  # define,  #include,  #un  def,  #line,  pragma  directives,  Conditional directives,  Predefined  identifiers,  Type  Qualifiers,  variable  length arguments."
9,3,Unit IV,"Advanced  C  concept  –  Bitwise  operators  and  Pre-processor directives.
Bitwise Operators – Introduction, Bitwise operators (bitwise and,
bitwise or, bitwise Exclusive or, bitwise not, bitwise shift operator). Pre-processor  Directives–  Types  of  pre-processor  directives,  # define,  #include,  #un  def,  #line,  pragma  directives,  Conditional directives,  Predefined  identifiers,  Type  Qualifiers,  variable  length arguments."
10,1,Unit IV,"Advanced  C  concept  –  Bitwise  operators  and  Pre-processor directives.
Bitwise Operators – Introduction, Bitwise operators (bitwise and,
bitwise or, bitwise Exclusive or, bitwise not, bitwise shift operator). Pre-processor  Directives–  Types  of  pre-processor  directives,  # define,  #include,  #un  def,  #line,  pragma  directives,  Conditional directives,  Predefined  identifiers,  Type  Qualifiers,  variable  length arguments."
10,2,Unit IV,"Advanced  C  concept  –  Bitwise  operators  and  Pre-processor directives.
Bitwise Operators – Introduction, Bitwise operators (bitwise and,
bitwise or, bitwise Exclusive or, bitwise not, bitwise shift operator). Pre-processor  Directives–  Types  of  pre-processor  directives,  # define,  #include,  #un  def,  #line,  pragma  directives,  Conditional directives,  Predefined  identifiers,  Type  Qualifiers,  variable  length arguments."
10,3,Unit IV,"Advanced  C  concept  –  Bitwise  operators  and  Pre-processor directives.
Bitwise Operators – Introduction, Bitwise operators (bitwise and,
bitwise or, bitwise Exclusive or, bitwise not, bitwise shift operator). Pre-processor  Directives–  Types  of  pre-processor  directives,  # define,  #include,  #un  def,  #line,  pragma  directives,  Conditional directives,  Predefined  identifiers,  Type  Qualifiers,  variable  length arguments."
